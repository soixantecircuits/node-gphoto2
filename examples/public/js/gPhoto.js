var GPhoto, request,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

request = superagent;

GPhoto = (function() {
  function GPhoto() {
    this.displaySettings = __bind(this.displaySettings, this);
    this.enumSettings = __bind(this.enumSettings, this);
    this.loadSettings = __bind(this.loadSettings, this);
  }

  GPhoto.prototype.startPreview = function() {
    var canvas, context, image, onload;
    canvas = document.getElementById("preview");
    context = canvas.getContext("2d");
    image = new Image();
    onload = function() {
      console.log('onload trigger');
      context.drawImage(image, 0, 0, canvas.width, canvas.height);
      console.log(Date.parse(new Date()));
      return image.src = '/preview' + Date.parse(new Date()) + '?t=';
    };
    image.src = '/preview';
    $(image).bind('load', onload);
    return onload();
  };

  GPhoto.prototype.stopPreview = function() {
    return $('#img').unbind('load');
  };

  GPhoto.prototype.loadSettings = function(cb) {
    return request.get('/settings', (function(_this) {
      return function(settings) {
        if (cb) {
          return cb(JSON.parse(settings.text));
        }
      };
    })(this));
  };

  GPhoto.prototype.enumSettings = function(settings, gui) {
    if (!gui) {
      gui = this.gui;
    }
    return $.each(settings, (function(_this) {
      return function(key, val) {
        var changeFn, foo, _ref;
        if ((_ref = val.type) === 'window' || _ref === 'section') {
          return _this.enumSettings(val.children, gui.addFolder(val.label));
        } else {
          foo = {};
          foo[val.label] = val.value;
          changeFn = function(newValue) {
            console.log(val.label, "changed to", newValue);
            return request.put("/settings/" + key, {
              newValue: newValue
            }, function(response) {
              return console.log(response);
            });
          };
          if (val.type === 'string') {
            return gui.add(foo, val.label).onChange(changeFn);
          } else if (val.type === 'toggle') {
            foo[val.label] = val.value !== 0;
            return gui.add(foo, val.label).onChange(function(newValue) {
              return request.put("/settings/" + key, {
                newValue: (newValue ? 1 : 0)
              }, function(response) {
                return console.log(response);
              });
            });
          } else if (val.type === 'choice') {
            return gui.add(foo, val.label, val.choices).onChange(changeFn);
          } else if (val.type === 'range') {
            return gui.add(foo, val.label, val.min, val.max, val.step).onChange(changeFn);
          }
        }
      };
    })(this));
  };

  GPhoto.prototype.displaySettings = function() {
    var foo;
    if (!this.gui) {
      this.gui = new dat.GUI();
    }
    foo = {
      'Start live preview': (function(_this) {
        return function() {
          return _this.startPreview();
        };
      })(this),
      'Take picture': (function(_this) {
        return function() {
          return request.get('takePicture', {
            download: false
          }, function(res) {
            console.log(res);
            if (res.text) {
              return $('<a>').attr('href', res.text).text(res.text).appendTo($('#downloads')).css({
                'display': 'block'
              });
            }
          });
        };
      })(this)
    };
    this.gui.add(foo, 'Take picture');
    this.gui.add(foo, 'Start live preview');
    return this.loadSettings(this.enumSettings);
  };

  return GPhoto;

})();

window.gphoto = new GPhoto();

window.gphoto.displaySettings();

// ---
// generated by coffee-script 1.9.0